# -*- coding: utf-8 -*-
"""M5 Ejercicio8 ErickSandoval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1riAB1KYTAfsy7moRZRzwd-ezRjYVtN84

# **Setup**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.inspection import DecisionBoundaryDisplay

iris = datasets.load_iris()

iris = pd.DataFrame(
    data= np.c_[iris['data'], iris['target']],
    columns= iris['feature_names'] + ['target']
    )
iris.head()

species = []

for i in range(len(iris['target'])):
    if iris['target'][i] == 0:
        species.append("setosa")
    elif iris['target'][i] == 1:
        species.append('versicolor')
    else:
        species.append('virginica')


iris['species'] = species

iris.head()

"""# **Analisis Exploratorio**"""

iris.info()

iris.describe()

setosa = iris[iris['species'] == 'setosa']
versicolor = iris[iris['species'] == 'versicolor']
virginica = iris[iris['species'] == 'virginica']

fig, ax = plt.subplots(figsize = (13,7))

ax.scatter(setosa['petal length (cm)'],setosa['petal width (cm)'], label = 'Setosa', facecolor = "red")
ax.scatter(versicolor['petal length (cm)'],versicolor['petal width (cm)'], label = 'Versicolor', facecolor = "blue")
ax.scatter(virginica['petal length (cm)'],virginica['petal width (cm)'], label = 'Virginica', facecolor = "green")

ax.grid()
ax.legend(loc = 'upper left')
ax.set_xlabel('Petal length (cm)')
ax.set_ylabel('Petal width (cm)')
plt.tight_layout()
plt.show()

"""En el grafico podemos observar los puntos agrupados por colores, donde rojo son datos correspondientes a Setosa, Azules a Versicolor y Verde a Virginica.

# **Ajuste del modelo**
"""

X = iris.drop(['sepal width (cm)', 'sepal length (cm)', 'target', 'species'], axis = 1)
y = iris['target']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.9, random_state = 1)

#Ajuste de los Modelos SVC
C = 1

models = (
    SVC(kernel="linear", C=C),
    SVC(kernel="rbf", gamma=0.7, C=C),
    SVC(kernel="poly", degree=3, gamma="auto", C=C),
)
models = (clf.fit(X_train, y_train) for clf in models)

titles = (
    "Linear kernel",
    "RBF kernel",
    "Polynomial kernel",
)

#Graficos de los modelos SVC
fig, sub = plt.subplots(3, 1, figsize = (10,8))

X0, X1 = X['petal length (cm)'], X['petal width (cm)']

for clf, title, ax in zip(models, titles, sub.flatten()):
    disp = DecisionBoundaryDisplay.from_estimator(
        clf,
        X,
        response_method="predict",
        cmap=plt.cm.coolwarm,
        alpha=0.8,
        ax=ax,
        xlabel='Petal Length cm',
        ylabel='Petal Width cm',
    )
    ax.scatter(X0, X1, c=y, cmap=plt.cm.coolwarm, s=20, edgecolors="k")
    ax.set_xticks(())
    ax.set_yticks(())
    ax.set_title(title)

plt.tight_layout()
plt.subplots_adjust(top = 0.9)
plt.show()