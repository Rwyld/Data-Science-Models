# -*- coding: utf-8 -*-
"""M5 Ejercicio6 ErickSandoval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PZ5EVPskFKxPzHDGxPVr4ivaFMMSLEF8

# **Data Setup**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

rawData = "https://raw.githubusercontent.com/Rwyld/Data-Science-Models/main/Modelos/Random%20Forest/TemperaturasCSV.csv"

data = pd.read_csv(rawData)

data = data.drop(['year','forecast_noaa',	'forecast_acc',	'forecast_under'], axis=1)
data.head(3)

"""#**Analisis Descriptivo**"""

data.info()

data.describe()

"""Faltan 17 datos, y hay datos maximos de temp_1 y temp_2



"""



data = data.drop(data[data['temp_1'] > 100].index)
data = data.drop(data[data['temp_2'] > 100].index)
data.describe()

data.head()

data.tail()

fig, axe = plt.subplots(3,1, figsize=(10,12))

sns.scatterplot(data=data, x='average', y=data.index, hue='month', legend='full', s=100, ax=axe[0])
axe[0].legend(loc='lower right', title='Month')
axe[0].set_xlim(40, 85)
axe[0].set_title("Average vs Dias")

sns.scatterplot(data=data, x='temp_1', y=data.index, hue='month', legend='full', s=100, ax=axe[1])
axe[1].legend(loc='lower right')
axe[1].set_xlim(30, 100)
axe[1].set_title("Temperatura 1 dia antes vs Dias")

sns.scatterplot(data=data, x='temp_2', y=data.index, hue='month', legend='full', s=100, ax=axe[2])
axe[2].legend(loc='lower right')
axe[2].set_xlim(30, 100)
axe[2].set_title("Temperatura 2 dias antes vs Dias")

plt.tight_layout()
plt.show()

fig, axe = plt.subplots(2,1, figsize=(10,8))

sns.scatterplot(data=data, x='actual', y=data.index, hue='month', legend='full', s=100, ax=axe[0])
axe[0].legend(loc='lower right')
axe[0].set_xlim(25, 100)
axe[0].set_title("Temperatura máxima vs Dias")

sns.scatterplot(data=data, x='friend', y=data.index, hue='month', legend='full', s=100, ax=axe[1])
axe[1].legend(loc='lower right')
axe[1].set_xlim(25, 100)
axe[1].set_title("Prediccion Amigo vs Dias")

plt.tight_layout()
plt.show()

"""Se confirma la perdida de datos
Datos de Friend son mas dispersos en comparacion a los demas, que son similares entre si, siendo que los datos actuales difieren un poco con las temp 1 y 2

# **Preparacion de data**
"""

data = pd.get_dummies(data, columns=['week'])
display(data)

data = data.astype(float)
data.info()

X = data.drop(['actual'], axis=1)
y = data['actual']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.75, random_state = 42)

tempMax = np.mean(y_train)

baseline = np.full_like(y_test, tempMax)
mse = mean_squared_error(y_test, baseline)

print(mse)

"""La linea de base tiene un error cuadratico medio de 138.16912884303366, lo que se podria interpretar que las temperaturas varian en los diferentes dias del año, obteniendo asi este altisimo resultado en el error

# **Ajuste del Modelo**
"""

rf = RandomForestRegressor(n_estimators=1000, random_state=42)

rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

plt.scatter(y_test, y_pred)
plt.xlabel('Valores verdaderos')
plt.ylabel('Predicciones')
plt.show()

"""La prediccion visualizada, se observa una tendencia lineal entre los datos reales (y_test) y los datos predichos (y_pred)."""

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mse)

print(mse)
print(rmse)
print(r2)

"""En cuanto a las metricas obtenidas...

El MSE fue de 27.0, lo que significa que en promedio las preddiciones difieren 27.0 unidades del valor real.

El RMSE fue de 5.19, lo que significa que las predicciones difieren 2.49 unidades del valor real.

Y el R2 es de un 0.80, que nos indica que el modelo se ajusta bien, debido a que es cercano a 1.

En general, el modelo de Random Forest realizado, predice valores precisos y que es adecuado para este conjunto de datos, pero que podria mejorar ajusto algunos hiperparametros o cambiando la variable respuesta a "average", la cual se obtuvo un mejor R2, de un 0.94, en un testeo de prueba con esta variable.


"""